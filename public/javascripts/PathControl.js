// Generated by CoffeeScript 1.4.0
(function() {
  var CP, G, PathControl, PathElement, Polygon, PolygonDraw;

  G = function() {
    return document.createElementNS("http://www.w3.org/2000/svg", "g");
  };

  CP = function(x, y) {
    var obj;
    obj = document.createElementNS("http://www.w3.org/2000/svg", "circle");
    obj.setAttributeNS(null, "cx", x);
    obj.setAttributeNS(null, "cy", y);
    obj.setAttributeNS(null, "r", 0.02);
    obj.setAttributeNS(null, "stroke", "white");
    obj.setAttributeNS(null, "stroke-width", 0.01);
    obj.setAttributeNS(null, "fill", "red");
    obj.setAttribute("class", "SmileEditControlPoint");
    return obj;
  };

  Polygon = function(stroke, swidth, fill) {
    var obj;
    obj = document.createElementNS("http://www.w3.org/2000/svg", "polygon");
    obj.setAttributeNS(null, "stroke", stroke);
    obj.setAttributeNS(null, "stroke-width", swidth);
    obj.setAttributeNS(null, "fill", fill);
    obj.setAttributeNS(null, "points", " ");
    return obj;
  };

  PathElement = (function() {

    function PathElement(parent, data) {
      var c,
        _this = this;
      this.parent = parent;
      this.control = "";
      if (data.match(/^\-?\d(\.\d*)?,\-?\d(\.\d*)?$/)) {
        c = data.split(",");
        this.handle = CP(Number(c[0]), Number(c[1]));
        $(this.parent.visual).append(this.handle);
        $(this.handle).mouseover(function() {
          event.preventDefault();
          $(_this.handle).attr({
            r: 0.04
          });
          _this.last = {
            x: 0,
            y: 0
          };
          return _this.dragging = false;
        });
        $(this.handle).mousedown(function() {
          event.preventDefault();
          _this.last.x = event.clientX;
          _this.last.y = event.clientY;
          return _this.dragging = true;
        });
        $(this.handle).mousemove(function() {
          var now;
          event.preventDefault();
          if (_this.dragging) {
            now = {
              x: event.clientX,
              y: event.clientY
            };
            $(_this.handle).attr({
              cx: Number($(_this.handle).attr('cx')) + (now.x - _this.last.x) / _this.parent.scale,
              cy: Number($(_this.handle).attr('cy')) + (now.y - _this.last.y) / _this.parent.scale
            });
            _this.last = now;
            return _this.parent.redraw();
          }
        });
        $(this.handle).bind("mouseup mouseout", function() {
          $(_this.handle).attr("r", 0.02);
          return _this.dragging = false;
        });
      } else {
        this.control = data;
      }
    }

    PathElement.prototype.read = function() {
      if (this.handle) {
        return "" + ($(this.handle).attr('cx')) + "," + ($(this.handle).attr('cy'));
      } else {
        return this.control;
      }
    };

    PathElement.prototype.translate = function(dx, dy) {
      return $(this.handle).attr({
        cx: Number($(this.handle).attr('cx')) + dx / this.parent.scale,
        cy: Number($(this.handle).attr('cy')) + dy / this.parent.scale
      });
    };

    return PathElement;

  })();

  PathControl = (function() {

    function PathControl(element, scale) {
      var d, i;
      this.element = element;
      this.scale = scale;
      this.visual = G();
      $(this.element).parent().append(this.visual);
      d = $(this.element).attr("d");
      this.data = (function() {
        var _i, _len, _ref, _results;
        _ref = d.split(" ");
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          i = _ref[_i];
          _results.push(new PathElement(this, i));
        }
        return _results;
      }).call(this);
      this.hidden = false;
    }

    PathControl.prototype.redraw = function() {
      var element;
      return $(this.element).attr("d", ((function() {
        var _i, _len, _ref, _results;
        _ref = this.data;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          element = _ref[_i];
          _results.push(element.read());
        }
        return _results;
      }).call(this)).join(" "));
    };

    PathControl.prototype.showEdit = function() {
      var point, _i, _len, _ref;
      _ref = this.data;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        point = _ref[_i];
        $(point.handle).show();
      }
      return this.hidden = false;
    };

    PathControl.prototype.hideEdit = function() {
      var point, _i, _len, _ref;
      _ref = this.data;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        point = _ref[_i];
        $(point.handle).hide();
      }
      return this.hidden = true;
    };

    PathControl.prototype.toggleEdit = function() {
      if (this.hidden) {
        return this.showEdit();
      } else {
        return this.hideEdit();
      }
    };

    return PathControl;

  })();

  PolygonDraw = (function() {

    function PolygonDraw(visual, scale, initPoints) {
      var idx, point,
        _this = this;
      this.visual = visual;
      this.scale = scale;
      this.element = Polygon("#000000", 3 / this.scale, "#FFFFFF");
      this.last = {
        x: 0,
        y: 0
      };
      this.hidden = false;
      $(this.visual).append(this.element);
      this.dragging = false;
      $(this.element).mousedown(function(evt) {
        if (!_this.hidden) {
          evt.preventDefault();
          _this.last.x = evt.clientX;
          _this.last.y = evt.clientY;
          return _this.dragging = true;
        }
      });
      $(this.element).mousemove(function(evt) {
        if (_this.dragging) {
          evt.preventDefault();
          _this.translate(evt.clientX - _this.last.x, evt.clientY - _this.last.y);
          _this.last.x = evt.clientX;
          return _this.last.y = evt.clientY;
        }
      });
      $(this.element).bind("mouseout mouseup", function(evt) {
        evt.preventDefault();
        return _this.dragging = false;
      });
      if (!(initPoints != null)) {
        initPoints = [];
      }
      this.points = (function() {
        var _results;
        _results = [];
        for (idx in initPoints) {
          point = initPoints[idx];
          _results.push(new PathElement(this, "" + point[0] + "," + point[1]));
        }
        return _results;
      }).call(this);
      this.redraw();
    }

    PolygonDraw.prototype.redraw = function() {
      var element;
      return $(this.element).attr("points", ((function() {
        var _i, _len, _ref, _results;
        _ref = this.points;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          element = _ref[_i];
          _results.push(element.read());
        }
        return _results;
      }).call(this)).join(" "));
    };

    PolygonDraw.prototype.add = function(x, y) {
      this.points.push(new PathElement(this, "" + ((x - 0.25 * this.scale) / this.scale) + "," + ((y - 0.25 * this.scale) / this.scale)));
      return this.redraw();
    };

    PolygonDraw.prototype.translate = function(dx, dy) {
      var point, _i, _len, _ref;
      _ref = this.points;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        point = _ref[_i];
        point.translate(dx, dy);
      }
      return this.redraw();
    };

    PolygonDraw.prototype.showEdit = function() {
      var point, _i, _len, _ref;
      _ref = this.points;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        point = _ref[_i];
        $(point.handle).show();
      }
      return this.hidden = false;
    };

    PolygonDraw.prototype.hideEdit = function() {
      var point, _i, _len, _ref;
      _ref = this.points;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        point = _ref[_i];
        $(point.handle).hide();
      }
      return this.hidden = true;
    };

    PolygonDraw.prototype.toggleEdit = function() {
      if (this.hidden) {
        return this.showEdit();
      } else {
        return this.hideEdit();
      }
    };

    return PolygonDraw;

  })();

  window.PathControl = PathControl;

  window.PolygonDraw = PolygonDraw;

}).call(this);
