doctype 5
html
  head
    title SPiRO
    link(rel='stylesheet', href='/stylesheets/style.css') 
    script(type='text/javascript', src='/javascripts/jquery.min.js')
  body
   #EditControl
     .controls
       span parameters
       #parameters.controllCollection
         label( for="#r1" ) radius 1
         input#r1( type="range", min=0, max=10000 )
         label( for ="#r2" ) radius 2
         input#r2( type="range", min=0, max=10000 )
         label( for="#alpha" ) alpha
         input#alpha( type="range", min=1, max=100 ) 
         label( for="#d" ) d
         input#d( type="range", min=1, max= 360 )
         label( for="#t" ) t
         input#t( type="range", min=1, max=4000 )
       span colors
       #colors.controllCollection 
         label( for="#outlineColor" )
         input#outlineColor( type="color" )
         #gradient.controllCollection
           span Gradient
           br
           input.inner( type="color" )
           input.outer( type="color" )
           br
           input.ratio( type="range", min=1, max= 100 )
         label( for="#colorRadius" )
     .unfolder Edit
   svg.spiro
     defs
       radialGradient#colorGradient( cx="50%", cy="50%", r="50%" )
         stop.inner( stop-color="orange", offset="0%" )
         stop.middle( stop-color="yellow", offset="50%" )
         stop.outer( stop-color="yellow", offset="100%") 
     - var scale =  (typeof scale !== 'undefined' && scale ) || 300 ;
     g.rect( x=0, y=0, width=scale, height=scale, fill="#001A13" ) 
     g.main( transform="scale( " + scale + " ) translate( 1, 1 )" )
       circle( cx=0, cy=0, r=1, fill="url(#colorGradient)" )
       polyline( points="", stroke="black", stroke-width= 0.1 / scale, fill="none" )
     

   :coffeescript
     $("#gradient .inner").change -> $("#colorGradient .inner").attr "stop-color", $("#gradient .inner").val()
     $("#gradient .outer").change -> $("#colorGradient .outer").attr "stop-color", $("#gradient .outer").val()
     $("#gradient .ratio").change -> $("#colorGradient .middle").attr "offset", "#{ Number($("#gradient .ratio").val())}%"
     $("#outlineColor").change -> $(".spiro .main polyline").attr "stroke", $("#outlineColor").val()
    
     redraw = ->
       parameters = {}
       $("#parameters input").each (idx, para) ->
         parameters[para.id] =  Number( $( para ).val() )
       r1 =  parameters["r1"] / 10000
       r2 = ( 1 - r1 ) * (  parameters["r2"] / 10000 )
       d =  ( parameters["d"] / 360) * 2 * Math.PI
       alpha = parameters["alpha"] / 10
       t = parameters["t"]
       points = ""
       for i in [0...t]
         pos =  i * d * 2 * Math.PI
         x = r1 * Math.sin(  pos ) + r2 * Math.sin( alpha * pos ) 
         y = r1 * Math.cos(  pos ) + r2 * Math.cos( alpha * pos ) 
         points += "#{x},#{y} "
       $(".spiro .main polyline").attr( "points", points )
     $("#parameters input").change -> redraw()
     redraw()

