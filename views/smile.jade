svg#SmileyEditor( xmlns="http://www.w3.org/2000/svg", version="1.1" )
  g( viewBox = "0 0 300 300" )
    circle.head( r=144, cx=150, cy=150, stroke="none", fill="yellow", stroke="black", stroke-width=8 )
    g
      g.eye.left
        circle.ball( r=30, cx=100, cy=100, stroke="black", stroke-width=5, fill="white" )
        g.center
          circle.iris(  r=14, cx=100, cy=100, fill="#000000", stroke-width=2, stroke="black" )
          circle.pupil( r=8, cx=100, cy=100, fill="black" )
      g.eye.right
        circle.ball( r=30, cx=200, cy=100, stroke="black", stroke-width=5, fill="white" )
        g.center
          circle.iris(  r=14, cx=200, cy=100, fill="#000000", stroke-width=2, stroke="black" )
          circle.pupil( r=8, cx=200, cy=100, fill="black" )
    g
      path.mouth.outlines( d="M 30,180 C 100,300 200,300 270,180 z", fill="white", stroke="black", stroke-width=7 )
    g#controls
      circle.control.mouth.right.end( cx=30, cy=180,  r=8,  fill="red", stroke-width=3, stroke="white" )
      circle.control.mouth.right.down.ctr( cx=100, cy=300,  r=8,  fill="red", stroke-width=3, stroke="white"     ) 
      circle.control.mouth.left.down.ctr( cx=200, cy=300,   r=8,  fill="red", stroke-width=3, stroke="white"  )
      circle.control.mouth.left.end( cx=270, cy=180,  r=8,  fill="red", stroke-width=3, stroke="white" )
      circle.control.mouth.right.up.ctr( cx=100, cy=180,  r=8,  fill="red", stroke-width=3, stroke="white"     ) 
      circle.control.mouth.left.up.ctr( cx=200, cy=180,   r=8,  fill="red", stroke-width=3, stroke="white"  )

#EditControl
  .controlCollection
     label( for="editEyeColor" ) Edit Eye Color
     br
     input#changeEyeColor( type="color" )
     .controlCollection
       span Edit Eye Position
       br
       label( for="editLeftEyePosition") left
       input#editLeftEyePosition( type="checkbox" )
       label( for="editRightEyePosition") right
       input#editRightEyePosition( type="checkbox" )
  .controlCollection
     button#toggleControlPoints Edit Mouth

:coffeescript
  $("#changeEyeColor").change -> $(".eye .center .iris").attr "fill", $("#changeEyeColor").val() 
  $("#toggleControlPoints").click -> $(".control").toggle()


  lastX = undefined
  lastY = undefined
  dragging = undefined

  $(".pupil").each (idx, el ) ->
    $( el ).css "pointer-events", "none"

  moveEye = ( side, x, y ) ->
    center_x = Number($(".eye.#{side} .center .iris").attr( "cx" ))
    center_y = Number($(".eye.#{side} .center .iris").attr( "cy" ))
    eye_x = Number($(".eye.#{side} .ball").attr( "cx" ))
    eye_y = Number($(".eye.#{side} .ball").attr( "cy" ))
    dist =  Math.sqrt( Math.pow( center_x - eye_x + x , 2 ) + Math.pow( center_y - eye_y + y, 2 ) )
    max_dist =  Math.abs( Number($(".eye.#{side} .ball").attr( "r" )) - Number($(".eye.#{side} .center .iris").attr("r") ))
    if dist <= max_dist
      $(".eye.#{side} .center *").each (idx, el) -> 
        $(el).attr 
          cx: center_x + x 
          cy: center_y + y 
  movingEye = false
  $(".eye.right .center .iris").mousedown ->
    if not dragging? or movingEye
      console.log "get down"
      lastX = event.clientX
      lastY = event.clientY 
      movingEye = true
  $(".eye.left .center .iris").mousedown ->
    if not dragging? or movingEye
      console.log "get down"
      lastX = event.clientX
      lastY = event.clientY  
      movingEye = true
  $(".eye.left  .center .iris").mousemove ->
    if movingEye
      if $("#editLeftEyePosition:checked").length isnt 0
        console.log "moving"
        dx = event.clientX - lastX
        dy = event.clientY - lastY
        moveEye "left", dx, dy 
        moveEye "right", dx, dy if $("#editRightEyePosition:checked").length isnt 0
      lastX = event.clientX
      lastY = event.clientY
     
  $(".eye.right .center .iris").mousemove ->
    if movingEye
      if $("#editRightEyePosition:checked").length isnt 0
        console.log "moving"
        dx = event.clientX - lastX
        dy = event.clientY - lastY
        moveEye "right", dx, dy 
        moveEye "left", dx, dy if $("#editLeftEyePosition:checked").length isnt 0
      lastX = event.clientX
      lastY = event.clientY

  $(".eye .center .iris").mouseout -> 
    console.log "release"
    movingEye = false 
  $(".eye .center .iris").mouseup  ->
    console.log "release"
    movingEye = false

  getCP = ( query ) ->
    "#{$(query).attr("cx")},#{$(query).attr("cy")}"
  CPcontext = ( context ) ->
    ( query ) ->
      getCP("#{context}#{query}")
  mouth = CPcontext("circle.control.mouth")
  redrawSmile = ->
    $("path.mouth.outlines").attr
      d: "M #{ (start = mouth('.right.end')) } C #{ mouth('.right.down.ctr')} #{ mouth('.left.down.ctr') } #{ mouth('.left.end') } #{ mouth('.left.up.ctr') } #{ mouth('.right.up.ctr') } #{start}  z"

  $(".control").mouseover (evt) ->
    $(@).attr 
      r: 12

  $(".control").mousedown (evt) ->
     lastX = evt.clientX
     lastY = evt.clientY
     if not dragging?
       dragging =  @ 
  $(".control").mousemove (evt) ->
     nowX = evt.clientX
     nowY = evt.clientY
     if @ is dragging
       $(@).attr
          cx: Number($(@).attr('cx')) + (nowX - lastX)
          cy: Number($(@).attr('cy')) + (nowY - lastY)
       redrawSmile()
     lastX = nowX
     lastY = nowY
  
  release = ( element ) ->
    $( element  ).attr 
      r: 8
    if element is dragging
      dragging = undefined

  $(".control").mouseout ->
    release( @ )
  $(".control").mouseup ->
    release( @ )

